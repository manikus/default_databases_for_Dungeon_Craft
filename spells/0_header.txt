// Spell database file
// The line above **must** be the first line of the spells file!!!
//
//	Total validation is performed when reading this data. Nothing you do can cause the program to crash.  It may spit error messages and quit for lack of something decent to do but it will not crash or do unexpected things. It shouldn't anyway. If it does, please let us know.
//
//	The first item has the name "template" and will be ignored.  You can use it as a 'template'.  Copy it to the bottom of the file and edit the copy to add your item to the database.
//
//	Each line is of the form    name = value (value may be omitted)
//	eg:   
//		Special Ability = 
//	This line will be interpreted as setting 'Special Ability' to the empty string.  This is commonly the default so in many cases it is the same as omitting the line entirely.
//
//	White space is a bit important.  Because names and values can contain blanks.  So the rule is....leading and trailing whitespace are ignored.  So, for example:
//		attack bonus         =     3         <cr>
//		attack bonus=3<cr>
//	are equivalent.  But
//		attack    bonus = 3
//		attack bonus = 3
//	are different.
//
//	Lines starting with two slashes are comment lines.  Like this one.
//
//	Attribute names are case-insensitive.  
//		Name = Wimpy Axe
//		namE = Wimpy Axe
//		NAME = Wimpy Axe
//	are equivalent.
//	Text values retain their case.  Values with enumerated possibilities are case-insensitive.  Example  cLaSs = PaLaDiN     + FiGhTeR+ThIeF
//
//	File names can use the UNIX syntax with slashes because the backslash is used to escape special characters and it gets ugly to put double backslashes everywhere.  If you like to use backslashes you may. We will accept either.  Even mixed in a single filename.
//	Example:    C:/UAF\\src\\guild of ravens/release1/beta\\art/barkeep.bmp
//
//	Item definitions are delimited by \(BEGIN) ........ \(END) which must start in column 1.  This ain't free format. You get what you pay for.  
//
//  ************ Now for the interesting part  ***********
//
//	Each spell is defined by the following fields:
//
// Name (text, required)
//	Each spell must have a uniue name.  You may add a 
//	qualifier to a name (separated with a vertical bar) 
//	to make it unique.  For example:
//		Dimwittify
//		Dimwittify|sorta
//		Dimwittify|really
//
//	The qualifier is only used when editing a design.  The 
//	qualifier is discarded when the binary files for the 
//	design are created. But the unique name is necessary 
//	during the design stage to allow unambiguous references 
//	to the spells.  During gameplay they are identified 
//	by a binary integer 'key' so there is no confusion 
//	between the three Dimwittifies even though they are 
//	all printed as 'Dimwittify'.
//	default - all blanks (which makes the entire spell a comment)
//	eg:		name = subliminal flash
//
// casting sound (file name, or "none", or "Default")
//	default - DEFAULT
//	eg:		casting sound = sound_SpellZap.wav
//
// cast Msg (text)
//	This is the text displayed when the spell is cast. You 
//	can substitute the names of the target, caster, and 
//	spell by using /t, /c, and /s
//  Amount of damage can be added to message by using /d
//	default - none
//	eg:		/c blasts /t with /s for /d points of damage.
//
// missile sound (file name, or "none", or "Default")
//	default - DEFAULT
//	eg:		missile sound = sound_SpellSlap.wav
//
// coverage sound (file name, or "none", or "Default")
//	default - DEFAULT
//	eg:		coverage sound = sound_IceStorm.wav
//
// hit sound (file name, or "none", or "Default")
//	default - DEFAULT
//	eg:		hit sound = sound_SpellHit.wav
//
// linger sound (file name, or "none", or "Default")
//	default - DEFAULT
//	eg:		linger sound = sound_HangingAround.wav
//
// cast art (filename, DEFAULT or none)
// Displayed over caster when spell is cast
// comma-separated text: 
//    filename, delay, num frames, frame width, frame height, style, MaxLoops, flags
//    filename - name of file
//    delay in millisecs where 1 sec=1000 ms (must be 0 for spells)
//    num frames is total frames in image
//    width is pixel width of single frame in image
//    height is pixel height
//    style is animation style, must be 0 for spells
//    MaxLoops is the max nbr times the animation will loop, if looping enabled by flags
//    flags is animation properties where: (flags are additive)
//        0=none
//        1=not used for spells
//        2=loop only nbr times in Max Loops
//        4=loop this animation
//        flags can be combined, as in 4+2=6 gives looping (4) and uses MaxLoops (2)
//	default - DEFAULT
// eg:		cast art = spell_Fireball.png,0,1,16,16,0,0,0
//
// missile art (filename, DEFAULT or none)
// Displayed over caster when spell is cast
// comma-separated text: 
//    filename, delay, num frames, frame width, frame height, style, MaxLoops, flags
//    filename - name of file
//    delay in millisecs where 1 sec=1000 ms (must be 0 for spells)
//    num frames is total frames in image
//    width is pixel width of single frame in image
//    height is pixel height
//    style is animation style, must be 0 for spells
//    MaxLoops is the max nbr times the animation will loop, if looping enabled by flags
//    flags is animation properties where: (flags are additive)
//        0=none
//        1=not used for spells
//        2=loop only nbr times in Max Loops
//        4=loop this animation
//        flags can be combined, as in 4+2=6 gives looping (4) and uses MaxLoops (2)
//	default - DEFAULT
// eg:		cast art = spell_Fireball.png,0,1,16,16,0,0,0
//
//// target cover art (filename, DEFAULT or none)
// Displayed over caster when spell is cast
// comma-separated text: 
//    filename, delay, num frames, frame width, frame height, style, MaxLoops, flags
//    filename - name of file
//    delay in millisecs where 1 sec=1000 ms (must be 0 for spells)
//    num frames is total frames in image
//    width is pixel width of single frame in image
//    height is pixel height
//    style is animation style, must be 0 for spells
//    MaxLoops is the max nbr times the animation will loop, if looping enabled by flags
//    flags is animation properties where: (flags are additive)
//        0=none
//        1=not used for spells
//        2=loop only nbr times in Max Loops
//        4=loop this animation
//        flags can be combined, as in 4+2=6 gives looping (4) and uses MaxLoops (2)
//	default - DEFAULT
// eg:		cast art = spell_Fireball.png,0,1,16,16,0,0,0
//
// targt hit art (filename, DEFAULT or none)
// Displayed over caster when spell is cast
// comma-separated text: 
//    filename, delay, num frames, frame width, frame height, style, MaxLoops, flags
//    filename - name of file
//    delay in millisecs where 1 sec=1000 ms (must be 0 for spells)
//    num frames is total frames in image
//    width is pixel width of single frame in image
//    height is pixel height
//    style is animation style, must be 0 for spells
//    MaxLoops is the max nbr times the animation will loop, if looping enabled by flags
//    flags is animation properties where: (flags are additive)
//        0=none
//        1=not used for spells
//        2=loop only nbr times in Max Loops
//        4=loop this animation
//        flags can be combined, as in 4+2=6 gives looping (4) and uses MaxLoops (2)
//	default - DEFAULT
// eg:		cast art = spell_Fireball.png,0,1,16,16,0,0,0
//
// target linger art (filename, DEFAULT or none)
// Displayed over caster when spell is cast
// comma-separated text: 
//    filename, delay, num frames, frame width, frame height, style, MaxLoops, flags
//    filename - name of file
//    delay in millisecs where 1 sec=1000 ms (must be 0 for spells)
//    num frames is total frames in image
//    width is pixel width of single frame in image
//    height is pixel height
//    style is animation style, must be 0 for spells
//    MaxLoops is the max nbr times the animation will loop, if looping enabled by flags
//    flags is animation properties where: (flags are additive)
//        0=none
//        1=not used for spells
//        2=loop only nbr times in Max Loops
//        4=loop this animation
//        flags can be combined, as in 4+2=6 gives looping (4) and uses MaxLoops (2)
//	default - DEFAULT
// eg:		cast art = spell_Fireball.png,0,1,16,16,0,0,0
//
// school (Cleric, Druid, Magic User or user defined)
//	Only one school allowed, this determines which 
//	school of magic the spell belongs to
//	default - Cleric
//	eg:		school = Cleric
//
// cast by (baseclass name)
//	The baseclass which can cast use this spell.
//	Multiple baseclass use multiple instances of the keyword,
//	one per line.
//	default - cleric
//	eg:		Cast by = ranger
//
// can target friend (yes/no)
//	Can this spell be cast on a party member?
//	default - no
//	eg:     can target friend = yes
//
// can target enemy (yes/no)
//	Can this spell be cast on enemies in combat?
//	default - yes
// eg:     can target enemy = yes
//
// Cumulative (yes/no)
//	Will this spell affect a target that already has the 
//	same spell active?
//	default - yes
//	eg: 		cumulative = yes
//
// Usable By Party (yes/no)
//	Can party members memorize and cast this spell? If not, 
//	only monsters/NPCs can use it.
//	default - yes
//	eg:     can memorize = yes
//
// can Scribe (yes/no)
//	Should this spell be made available for scribing by MU at level change? 
//  eg:     allow scribe = no
//
// auto Scribe (yes/no)
//	MagicUsers are automatically given spells with this property enabled when
//	they advance to a new level (or start anew at level 1)
//	default - no
//	eg:     auto scribe = no
//
// in camp (yes/no)
//	Can the spell be used in camp?
//	eg:		in camp = yes
//
// in combat (yes/no)
//	Can the spell be used in combat?
//	eg:		in combat = no
//
// can be dispelled (yes/no)
//	Can this spell be dispelled?
//	eg:		can be dispelled = yes
//
// lingers (yes/no)
//	Does the spell linger on the combat map?
//	eg:		lingers = no
//
// linger affects once (yes/no)
//	Does the lingering effect affect the ocmbatant
//	only once?
//	eg:		linger affects once = no
//
// save Versus ("Par/Pois/DM" or "Pet/Poly" or "Rod/Staff/Wand" 
//	or "spell" or "Breath Weapon"
//	Par/Pois/DM = Paralysis/Poison/DeathMagic
//	Pet/Poly = Petrification/Polymorph
//	Determines which table of saving throws will be used 
//	default - spell
//	eg:     save versus = Pet/Poly
//
// save result (none, negates, half damage, use THAC0)
//	What should a made Saving Throw do?
// default - none
// eg:     save result = half damage
//
// Special Ability (SA name)
//	each listed Special Ability corresponds to the 
//	Special Ability database.
//	Each Special Ability is listed on a new line
//	with a separate instance of the keyword.
//	eg:		Special Ability = spell_PoisonousBite
// 
// targeting type (self, selectByCount, party, touch, 
//	areacircle, SelectByHitDice,arealinepickstart, 
//	arealinepickend, areasquare, areacone)
// default - self
// eg:     targeting type = areacircle
//
// target width (integer)
//	default - 0
//	eg:		target width = 0
//
// target height (integer)
//	default - 0
//	eg:		target height = 0
//
// target range (integer)
//	default - 0
//	eg:		target range = 5
//
// level (integer 1-9)
//	default - 1
//	eg:     level = 4
//
// casting time (integer)
//	default - 1
// eg:     casting time = 2
//
// casting time units ( Immediate, Initiative, Rounds, Turns )
//	default - Immediate
//	eg:  casting time units = rounds
//
// Duration units (rounds, damage taken, hours, days, or instantaneous)
// default - rounds
// instantaneous equates to permanent, the spell effect never expires
// eg:     duration units = days
//
// target quantity  ( <num dice> d <sides> + <bonus> [+ <bonus>*level] [>| <maximum>]
// default - 0d0
// eg:     target quantity = 2d4 - 2 + level >| 2
// eg:     target quantity = 1d4 - 1
//
// Duration  ( <num dice> d <sides> + <bonus> [+<bonus>*level] [>| <maximum>]
// default - 0d0
// eg:     Duration = 2d6 + 1 >| 4
//
// Target Range  ( <num dice> d <sides> + <bonus> [+<bonus>*level] [>| <maximum>]
// default - 0d0
// eg:     target range = 2d4 + 0 + level
//
// Price (integer, base coin unit), charged by temple priest in temple event (integer)
// default - zero
// eg:     price = 200
//
// Spell Effect
// Specify which character attributes are modified by this spell. To modify multiple
// attributes, add multiple 'spell effect' lines.
//  
// Format:
// Attribute,Change Amount(diceplus format),Change Units, Targeting, Cumulative
//
//    Attribute = attribute keyword affected, such as $CHAR_THACO
//    Change Amount = how much to change attribute value, such as 1d4 + level + 2
//           This is a signed number. To decrease the current value, use a
//           negative Change Amount.
//    Change Units = 'delta', 'percent', or 'absolute'.
//           Delta value is added to current value
//           Percent changes current value by given percentage
//           Absolute changes current value to given value
//    Targeting = 'target','targeter','alltargettypes'
//           target = affects spell target
//           targeter = affects whomever targets the spell target (combat only)
//           alltargettypes = all of the above
//    Cumulative = 'yes' or 'no', will this attribute change have affect if
//                 same attribute already modified from same or different spell?
// Examples:
//  spell effect 1 = $CHAR_AC, 1d4+2, delta, target, yes
//  spell effect 2 = $CHAR_THACO, 1d6, percent, alltargettypes, no
//
//  Activate Script
//
//  Modify Script
//	This script is only called if there is a Spell Effect script and will match up
//	with a specific one, i.e. Modify Script 1 goes with Spell Effect 1, etc.
//	Modify Script acts directly on the third argument of Spell Effect, which is the
//	amount or kind. The modifier can be any appropriate GPDL function or script.
// Example:
//	spell effect 1 = $CHAR_HITPOINTS,-level,delta,target,yes
//	modify script 1 = $RETURN -# ($GET_CHAR_Lvl($IndexOf($AttackerContext()),"ranger") -# 8);
//
//  Saving Throw Script
//
//  Saving Throw Failed Script
//
//  Saving Throw Succeeded Script
//
//  Begin Script
//
//  End Script
//

